{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ДОМАШНЯЯ РАБОТА №3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Данильченко Вадим"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание 1: функция суммы элементов списка\n",
    "\"\"\"\n",
    "Дан список вида. Напишите функцию, которая возвращает сумму элементов на диагонали. Т. е. 13+32+23+35.\n",
    "\"\"\"\n",
    "data = [\n",
    "    [13, 25, 23, 34],\n",
    "    [45, 32, 44, 47],\n",
    "    [12, 33, 23, 95],\n",
    "    [13, 53, 34, 35],\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "103"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Решение\n",
    "def summ_diag(data):\n",
    "    j=0\n",
    "    summ=0\n",
    "    for i in range(len(data)):\n",
    "        summ+=data[i][j]\n",
    "        j+=1\n",
    "    return summ\n",
    "summ_diag(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание 2: функция суммы элементов списка\n",
    "\"\"\"\n",
    "Дан список чисел, часть из которых имеют строковый тип или содержат буквы. \n",
    "Напишите функцию, которая возвращает сумму квадратов элементов, которые могут быть числами.\n",
    "\"\"\"\n",
    "data2 = [1, '5', 'abc', 20, '2']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "401"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Решение 1: ищем просто int, не смотрим на текстовые\n",
    "def sum_num_sqrs(data2):\n",
    "    return sum([i**2 for i in data2 if type(i)==int])\n",
    "sum_num_sqrs(data2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ошибка: \"abc\" не конвертируется в int\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'сумма сконвертированных элементов: \"430\"'"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Решение 2: ищем все значения, поэлементно конвертируя в int\n",
    "def sum_num_after_convert(data2):\n",
    "    summ=0\n",
    "    for i in data2:\n",
    "        try:\n",
    "            summ+=int(i)**2\n",
    "        except:\n",
    "            print(f'ошибка: \"{i}\" не конвертируется в int')\n",
    "    return 'сумма сконвертированных элементов: \"{}\"'.format(summ)\n",
    "sum_num_after_convert(data2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'максимальное значение \"97.27\" приналежит валюте \"Китайских юаней\"'"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Задание 3: валюта с максимальным значением\n",
    "\"\"\"\n",
    "Напишите функцию, которая возвращает название валюты (поле 'Name') \n",
    "с максимальным значением курса с помощью сервиса https://www.cbr-xml-daily.ru/daily_json.js\n",
    "\"\"\"\n",
    "\n",
    "#Решение:\n",
    "def max_valute():\n",
    "    import requests\n",
    "    r = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')\n",
    "    max_val=max([line['Value'] for line in r.json()['Valute'].values()])\n",
    "    return 'максимальное значение \"{}\" приналежит валюте \"{}\"'.format(max_val,*[val['Name'] for val in r.json()['Valute'].values() if val['Value']==max_val])\n",
    "max_valute()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание 4: доработка класса\n",
    "\"\"\"\n",
    "Последнее упражнение с занятия\n",
    "1. Добавьте в класс еще один формат, который возвращает название валюты (например, 'Евро').\n",
    "\n",
    "2. Добавьте в класс параметр diff (со значениями True или False), который в случае значения True в методах \n",
    "eur и usd будет возвращать не курс валюты, а изменение по сравнению с прошлым значением.\n",
    "\"\"\"\n",
    "eur_val=[0]\n",
    "usd_val=[0]   \n",
    "class Rate:\n",
    "    def __init__(self, format='value'):\n",
    "        self.format = format\n",
    "    \n",
    "    def exchange_rates(self):\n",
    "        \"\"\"\n",
    "        Возвращает ответ сервиса с информацией о валютах в виде:\n",
    "        \n",
    "        {\n",
    "            'AMD': {\n",
    "                'CharCode': 'AMD',\n",
    "                'ID': 'R01060',\n",
    "                'Name': 'Армянских драмов',\n",
    "                'Nominal': 100,\n",
    "                'NumCode': '051',\n",
    "                'Previous': 14.103,\n",
    "                'Value': 14.0879\n",
    "                },\n",
    "            ...\n",
    "        }\n",
    "        \"\"\"\n",
    "        r = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')\n",
    "        return r.json()['Valute']\n",
    "    \n",
    "    def make_format(self, currency):\n",
    "        \"\"\"\n",
    "        Возвращает информацию о валюте currency в двух вариантах:\n",
    "        - полная информация о валюте при self.format = 'full':\n",
    "        Rate('full').make_format('EUR')\n",
    "        {\n",
    "            'CharCode': 'EUR',\n",
    "            'ID': 'R01239',\n",
    "            'Name': 'Евро',\n",
    "            'Nominal': 1,\n",
    "            'NumCode': '978',\n",
    "            'Previous': 79.6765,\n",
    "            'Value': 79.4966\n",
    "        }\n",
    "        \n",
    "        Rate('value').make_format('EUR')\n",
    "        79.4966\n",
    "        \"\"\"\n",
    "        response = self.exchange_rates()\n",
    "        \n",
    "        if currency in response:\n",
    "            if self.format == 'full':\n",
    "                return response[currency]\n",
    "            \n",
    "            if self.format == 'value':\n",
    "                return response[currency]['Value']\n",
    "        \n",
    "        return 'Error'\n",
    "    \n",
    "    def eur(self):\n",
    "        \"\"\"Возвращает курс евро на сегодня в формате self.format\"\"\"\n",
    "        return self.make_format('EUR')\n",
    "    \n",
    "    def usd(self):\n",
    "        \"\"\"Возвращает курс доллара на сегодня в формате self.format\"\"\"\n",
    "        return self.make_format('USD')\n",
    "\n",
    "#-----------------------------------------------------------------------------------------------------\n",
    "    #Решение 1й части\n",
    "    def val_name(self, currency):\n",
    "        #возвращает название валюты\n",
    "        response = self.exchange_rates()\n",
    "        return response[currency]['Name']\n",
    "\n",
    "    #Решение 2й части\n",
    "    def diff(self, currency, TF):\n",
    "        from datetime import datetime\n",
    "        global eur_val\n",
    "        global usd_val\n",
    "        \n",
    "        new_eur=self.eur()\n",
    "        new_usd=self.usd()\n",
    "        \n",
    "        if TF==True:\n",
    "            if currency=='EUR':\n",
    "                if new_eur==eur_val[-1]:\n",
    "                    difference=0\n",
    "                else:\n",
    "                    difference=new_eur-eur_val[-1]\n",
    "                    eur_val.append(new_eur)\n",
    "                return 'изменение валюты \"{}\" на \"{}\" составляет \"{}\"'.format(currency, datetime.today(), difference)\n",
    "            elif currency=='USD':\n",
    "                if new_usd==usd_val[-1]:\n",
    "                    difference=0\n",
    "                else:\n",
    "                    difference=new_usd-usd_val[-1]\n",
    "                    usd_val.append(new_usd)\n",
    "                return 'изменение валюты \"{}\" на \"{}\" составляет \"{}\"'.format(currency, datetime.today(), difference)\n",
    "        elif TF==False:\n",
    "            if currency=='EUR': \n",
    "                return f'текущий курс EUR={new_eur}'\n",
    "            elif currency=='USD': \n",
    "                return f'текущий курс USD={new_usd}'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Доллар США'"
      ]
     },
     "execution_count": 393,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# название валюты\n",
    "Rate().val_name('USD')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'изменение валюты \"EUR\" на \"2018-12-08 20:18:56.058901\" составляет \"76.0777\"'"
      ]
     },
     "execution_count": 389,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# разница с последним значением или актуальный показатель (только EUR и USD)\n",
    "Rate().diff('EUR', True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "введите длину ряда\n",
      "5\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'сумма 5 элементов в ряде Фибоначчи [1, 1, 2, 3, 5] равна 12'"
      ]
     },
     "execution_count": 420,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Задание 5: сумма n-чисел ряда\n",
    "\"\"\"\n",
    "Напишите функцию, возвращающую сумму первых n чисел Фибоначчи\n",
    "\"\"\"\n",
    "#Решение\n",
    "\n",
    "def fibonachy():\n",
    "    print('введите длину ряда')\n",
    "    n=int(input())\n",
    "    fib=[]\n",
    "    for i in range(n):\n",
    "        if len(fib)<2:\n",
    "            fib.append(1)\n",
    "        else:\n",
    "            fib.append(fib[-1]+fib[-2])\n",
    "    return f'сумма {n} элементов в ряде Фибоначчи {fib} равна {sum(fib)}'\n",
    "\n",
    "fibonachy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'2018-01-01': {'yandex': {'cpc': 100}}}"
      ]
     },
     "execution_count": 426,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Задание 6: преобразуем список в словарь по формату\n",
    "\"\"\"\n",
    "Напишите функцию, преобразующую произвольный список вида ['2018-01-01', 'yandex', 'cpc', 100] \n",
    "в словарь {'2018-01-01': {'yandex': {'cpc': 100}}}\n",
    "\"\"\"\n",
    "spis=['2018-01-01', 'yandex', 'cpc', 100]\n",
    "def slovar(spis):\n",
    "    slov={}\n",
    "    date, name, channel, cnt=spis\n",
    "    slov.setdefault(date,{name:{channel:cnt}})\n",
    "    return slov\n",
    "slovar(spis)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
