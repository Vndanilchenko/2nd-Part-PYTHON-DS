--------------- ДОМАШНЯЯ РАБОТА "Python для работы с базами данных" ---------------
-------------------------------- ДАНИЛЬЧЕНКО ВАДИМ --------------------------------

import os
import logging

import psycopg2
import psycopg2.extensions
from pymongo import MongoClient
import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy import Table, Column, Integer, Float, MetaData, String
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base


logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

--------------------------------------------------------------
# ЗАДАНИЕ1. psycopg2
#Необходимо с помощью Psycorg выполнить создание таблицы movies_top c помощью конструкции
#    SELECT *  INTO movies_top FROM (ЗАПРОС);
#Где ЗАПРОС имеет следующий вид:
#три поля: movieId (id фильма), ratings_num(число рейтингов), ratings_avg (средний рейтинг фильма)
#В выборку должны попасть только фильмы, у которых средний рейтинг выше 3.

logger.info("Создаём подключёние к Postgres")
params = {
    "host": os.environ['APP_POSTGRES_HOST'],
    "port": os.environ['APP_POSTGRES_PORT'],
    "user": 'postgres'
}
conn = psycopg2.connect(**params)

# дополнительные настройки
psycopg2.extensions.register_type(
    psycopg2.extensions.UNICODE,
    conn
)
conn.set_isolation_level(
    psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT
)
cursor = conn.cursor()

sql_str = "DROP TABLE IF EXISTS movies_top SELECT *  INTO movies_top FROM (select movieid, count(*) ratings_num, avg(rating) ratings_avg  from ratings group by movieid having avg(rating)>3) T;"

cursor.execute(sql_str)
conn.commit()

# Проверка - выгружаем данные
cursor.execute("SELECT * FROM movies_top LIMIT 10")
logger.info(
    "Выгружаем данные из таблицы movies_top: (movieId, ratings_num, ratings_avg)\n{}".format(
        [i for i in cursor.fetchall()])
)

--------------------------------------------------------------
# Задание2: SQLAlchemy
# выберите контент у которого больше 15 оценок (используйте filter)
# и средний рейтинг больше 3.5 (filter ещё раз)
# отсортированный по среднему рейтингу (используйте order_by()) # делаю по убыванию, т.к. логика в выводе top-контента
# id такого контента нужно сохранить в массив top_rated_content_ids 

# не буду ставить ограничение на количество тэгов на данном этапе, отфильтрую на этапе оработки pandas, иначе получаются тэги с количеством фильмов 1

Base = declarative_base()


class MoviesTop(Base):
    __tablename__ = 'movies_top'
    movieid = Column(Integer, primary_key=True)
    ratings_num = Column(Integer)
    ratings_avg = Column(Float)
    def __init__(self, movieid, ratings_num, ratings_avg):
        self.movieid = movieid
        self.ratings_num = ratings_num
        self.ratings_avg = ratings_avg
    def __repr__(self):
        return "<User('%s','%s','%s')>" % (self.movieid, self.ratings_num, self.ratings_avg)


# Создаём сессию

engine = create_engine('postgresql://postgres:@{}:{}'.format(os.environ['APP_POSTGRES_HOST'], os.environ['APP_POSTGRES_PORT']))
Session = sessionmaker(bind=engine)
session = Session()

top_rated_query=[]
top_rated_query = session.query(MoviesTop).filter(MoviesTop.ratings_num>15, MoviesTop.ratings_avg>3.5).order_by(MoviesTop.ratings_avg.desc())


logger.info("Выборка из top_rated_query\n{}".format([i for i in top_rated_query.limit(4)]))

top_rated_content_ids = [
    str(i[0]) for i in top_rated_query.values(MoviesTop.movieid)
]
logger.info("top_rated_content\n{}".format(top_rated_content_ids))

--------------------------------------------------------------
# Задание3: Pymongo
# Нужно подключиться к Pymongo и выгрузить список тегов для списка популярного контента, полученный на предыдущем шаге.
#В выборку должны попать теги фильмов из массива top_rated_content_ids и модификатор $in

mongo = MongoClient(**{
    'host': os.environ['APP_MONGO_HOST'],
    'port': int(os.environ['APP_MONGO_PORT'])
})

# Получите доступ к коллекции tags
db = mongo.get_database(name="movie")
tags_collection = db['tags']


# id контента используйте для фильтрации - передайте его в модификатор $in внутри find
# в выборку должны попать теги фильмов из массива 

top_rated_content_ids
#["159817", "2937", "38304", "2330", "318"]

mongo_query = tags_collection.find({ 'movieId': { '$in': top_rated_content_ids } })

mongo_docs = [
    i for i in mongo_query
]

print("Достали документы из Mongo: {}".format(mongo_docs[:5]))

id_tags = [(i['movieId'], i['name']) for i in mongo_docs]


# Задание4: Pandas --------------------------------------------------------------
# Постройте таблицу их тегов и определите top-5 самых популярных
# сгруппируйте по названию тега с помощью group_by
# для каждого тега вычислите, в каком количестве фильмов он встречается
# оставьте top-5 самых популярных тегов

# формируем DataFrame
tags_df = pd.DataFrame(id_tags, columns=['movieid', 'tags'])

top_5_tags = tags_df.groupby('tags').count().reset_index().rename(columns={'tags':'tags', 'movieid':'cnt_movies'}).sort_values('cnt_movies', ascending=False).head()

print(top_5_tags)

logger.info("Домашка выполнена!")
# --------------------------------------------------------------

